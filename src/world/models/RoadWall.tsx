/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from '@react-three/drei'
import { HexTerrain } from '../../types'
import { decodePieceID, getBoardHex3DCoords } from '../../utils/map-utils'
import { hexTerrainColor } from '../maphex/hexColors'
import { HEXGRID_HEX_APOTHEM, HEXGRID_HEX_RADIUS } from '../../utils/constants'

// const wallBlenderModelThickness = 0.075

function getOptions(rotation: number) {
  switch (rotation) {
    case 0:
      return { xAdd: -HEXGRID_HEX_APOTHEM, zAdd: HEXGRID_HEX_RADIUS / 2 }
    case 1:
      // return { xAdd: 0, zAdd: 0 }
      return { xAdd: -HEXGRID_HEX_APOTHEM, zAdd: -HEXGRID_HEX_RADIUS / 2 }
    case 2:
      return { xAdd: 0, zAdd: -HEXGRID_HEX_RADIUS }
    case 3:
      return { xAdd: HEXGRID_HEX_APOTHEM, zAdd: -HEXGRID_HEX_RADIUS / 2 }
    case 4:
      return { xAdd: HEXGRID_HEX_APOTHEM, zAdd: HEXGRID_HEX_RADIUS / 2 }
    case 5:
      return { xAdd: 0, zAdd: HEXGRID_HEX_RADIUS }
    default:
      return { xAdd: 0, zAdd: 0 }
  }
}
export function RoadWall({ pid }: { pid: string }) {
  const {
    // pieceID,
    altitude,
    rotation,
    // boardHexID,
    pieceCoords
  } = decodePieceID(pid)
  const { nodes } = useGLTF('/handmade-roadwall.glb') as any
  const { x, z, y } = getBoardHex3DCoords({ ...pieceCoords, altitude })
  const options = getOptions(rotation)
  return (
    <group
      position={[x + options.xAdd, y, z + options.zAdd]}
      // position={[x, y, z]}
      rotation={[0, (rotation * -Math.PI) / 3, 0]}
    >
      <mesh
        geometry={nodes.RoadWall.geometry}
      >
        <meshMatcapMaterial color={hexTerrainColor[HexTerrain.roadWall]} />
      </mesh>
    </group>
  )
}

useGLTF.preload('/handmade-roadwall.glb')
